import re


class SnortRule(object):
    def __init__(self):
        # Rule Headers
        self.action = 'alert'
        self.protocol = 'tcp'
        self.src_ip = 'any'
        self.src_port = 'any'
        self.dst_ip = 'any'
        self.dst_port = 'any'

        # General Rule
        self.msg = None
        self.reference = []
        self.sid = None
        self.gid = None
        self.rev = None
        self.classtype = None
        self.priority = None
        self.metadata = None

        # Payload Detection Rule
        self.content = []
        self.uricontent = []

    def __str__(self):
        return self.getrule()

    def __rule_header(self):
        '''Generate snort rule header.
        There are five information in the Rules Headers
        Rule Actions, Protocols, IP Addresses, Port Numbers,
        The Direction Operator'''
        header = [self.action, self.protocol, self.src_ip,
                  self.src_port, '->', self.dst_ip, self.dst_port]
        header = [str(i) for i in header]
        return ' '.join(header)

    def __rule_options(self):
        '''Generate rule options.
        There are four major categories of Rules Options.
        general, payload, non-payload, post-detection'''
        general = self.__rule_general()
        payload = self.__rule_payload()
        return "({general}; {payload};)".format(general=general,
                                                payload=payload)

    def __rule_general(self):
        '''Generate snort general rule options.
        There are eight keyword in general rule.
        msg, reference, gid, sid, rev, classtype, priority, metadata'''
        references = self.__slice_multiple('reference', self.reference)

        rest_general = ['msg:{message}'.format(message=self.msg),
                        'sid:{sid}'.format(sid=self.sid),
                        'gid:{gid}'.format(gid=self.gid),
                        'rev:{rev}'.format(rev=self.rev),
                        'classtype:{clstype}'.format(clstype=self.classtype),
                        'priority:{priority}'.format(priority=self.priority),
                        'metadata:{metadata}'.format(metadata=self.metadata)]
        general = rest_general + references
        general = self.__clean_none(general)
        return '; '.join(general)

    def __rule_payload(self):
        '''Generate snort payload detection rule options'''
        contents = self.__slice_multiple('content', self.content)
        uricontent = self.__slice_multiple('uricontent', self.uricontent)

        payload = contents + uricontent
        payload = self.__clean_none(payload)
        return '; '.join(payload)

    def __clean_none(self, option_list):
        '''Clean the None in the list'''
        update = []
        for option in option_list:
            if "None" not in option:
                update.append(option)
        return update

    def __slice_multiple(self, tag, data):
        '''Slice the multiple item'''
        behavior_keyword = ['nocase', 'depth', 'offset', 'rawbytes',
                            'distance', 'http_method']
        if data is None:
            return []
        else:
            assert isinstance(data, list)
            sliced = []
            for item in data:
                if item in behavior_keyword:
                    sliced.append('{keyword}'.format(keyword=item))
                elif item.split(':')[0] in behavior_keyword:
                    behavior = item.split(':')[0]
                    size = item.split(':')[1]
                    sliced.append('{behavior}:{size}'.format(behavior=behavior,
                                                             size=size))
                else:
                    sliced.append('{tag}:{item}'.format(tag=tag, item=item))
            return sliced

    def set_malicious_pattern(self, **kwargs):
        '''Get snort rule rule header, options.'''
        # Rule Headers
        self.action = kwargs.get('action', 'alert')
        self.protocol = kwargs.get('protocol', 'tcp')
        self.src_ip = kwargs.get('src_ip', 'any')
        self.src_port = kwargs.get('src_port', 'any')
        self.dst_ip = kwargs.get('dst_ip', 'any')
        self.dst_port = kwargs.get('dst_port', 'any')

        # General Rule
        self.msg = kwargs.get('msg')
        self.reference = kwargs.get('reference')
        self.sid = kwargs.get('sid')
        self.gid = kwargs.get('gid')
        self.rev = kwargs.get('rev')
        self.classtype = kwargs.get('classtype')
        self.priority = kwargs.get('priority')
        self.metadata = kwargs.get('metadata')

        # Payload Dection Rule
        self.content = kwargs.get('content')
        self.uricontent = kwargs.get('uricontent')

    def getrule(self):
        '''Return complete snort rule in string'''
        header = self.__rule_header()
        options = self.__rule_options()
        return "{header}{options}".format(header=header, options=options)

    def parser(self, rule_str):
        header = rule_str.split('(')[0]
        # header
        self.action = header.split(' ')[0]
        self.protocol = header.split(' ')[1]
        self.src_ip = header.split(' ')[2]
        self.src_port = header.split(' ')[3]
        self.dst_ip = header.split(' ')[5]
        self.dst_port = header.split(' ')[6]

        # options
        options = rule_str.split('(')[1]
        # remove the ')'
        options = options[0:-1]
        options_list = options.split(';')

        # remove the space start or end in the string
        for idx, item in enumerate(options_list):
            options_list[idx] = item.strip()

        behavior_keyword = ['nocase', 'depth', 'offset', 'rawbytes',
                            'distance', 'http_method']

        regex_msg = re.compile('msg:(.*)')
        regex_content = re.compile('content:(.*)')
        regex_uricontent = re.compile('uricontent:(.*)')
        regex_reference = re.compile('reference:(.*)')
        regex_sid = re.compile('sid:(.*)')
        regex_nocase = re.compile('nocase')
        regex_offset = re.compile('offset')
        regex_depth = re.compile('depth')
        # TODO:
        # behavior_keyword parser

        for idx, item in enumerate(options_list):
            if regex_msg.match(item) is not None:
                self.msg = regex_msg.match(item).group(1)

            elif regex_content.match(item) is not None or regex_nocase.match(item) is not None:
                if regex_content.match(item) is not None:
                    self.content.append(regex_content.match(item).group(1))

                if regex_nocase.match(options_list[idx+1]) is not None:
                    self.content.append(regex_nocase.match(options_list[idx+1]).group(0))

            elif regex_uricontent.match(item) is not None or regex_nocase.match(item) is not None:
                if regex_uricontent.match(item) is not None:
                    self.uricontent.append(regex_uricontent.match(item).group(1))

                if regex_nocase.match(options_list[idx+1]) is not None:
                    self.uricontent.append(regex_nocase.match(options_list[idx+1]).group(0))

            elif regex_reference.match(item) is not None:
                self.reference.append(regex_reference.match(item).group(1))

            elif regex_sid.match(item) is not None:
                self.sid = regex_sid.match(item).group(1)

            else:
                pass


if __name__ == "__main__":

    pattern = {
        'dst_port': 21,
        'msg': '"Trojan.VB.Gen"',
        'content': ['"|2f 70 6b 69 2f 63 72 6c 2f 70 72 6f|"', 'nocase',
                    '"|2f 70 6b 69 2f 63 72 6c 2f 70 72 6f|"', 'nocase',
                    'depth:4', 'offset:10'],
        'uricontent': ['"/DirectDownloaderInstaller.exe"', 'nocase'],
        'reference': ['md5,c1920c396043d109af6d8315cc66ba44',
                      'email,rules@anti-botnet.edu.tw'],
        'sid': 1000001}

    rule = SnortRule()
    rule.dst_port = 21
    rule.protocol = 'tcp'
    rule.msg = "Trojan.VB.Gen"
    rule.content = ['"|2f 70 6b 69 2f 63 72 6c 2f 70 72 6f|"', 'nocase']
    rule.uricontent =  ['"/DirectDownloaderInstaller.exe"', 'nocase']
    print 'rule:', rule.getrule()

    rule2 = SnortRule()
    rule2.parser('Alert UDP any any -> any 53 (msg:"DNS:proxim.ircgalaxy.pl, Kaspersky:Virus.Win32.Virut.q";content:"|06 70 72 6f 78 69 6d 09 69 72 63 67 61 6c 61 78 79 02 70 6c 00 |"; nocase; offset: 12; depth: 34; reference:email,rules@anti-botnet.edu.tw;reference:md5,0dbffb45311dcd1ceb30cfdd2120358a;sid:20000835;)')

    print 'msg:', rule2.msg
    print 'content', rule2.content
    print 'uricontent:', rule2.uricontent
    print 'reference:', rule2.reference
    print 'sid:', rule2.sid
    print 'rule2:', rule2.getrule()
